// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth.js required models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

// Updated User model for NextAuth compatibility
model User {
  id             String       @id @default(cuid())
  name           String?
  email          String       @unique
  emailVerified  DateTime?
  image          String?
  accounts       Account[]
  sessions       Session[]
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  organizationId String?
  isAdmin        Boolean      @default(false) // Admin role for organization
  organization   Organization? @relation(fields: [organizationId], references: [id])
  invitedOrganizations OrganizationInvite[]
  createdSelfServeInvites OrganizationSelfServeInvite[]
  notes          Note[]

  @@map("users")
}

model Organization {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  members   User[]
  invites   OrganizationInvite[]
  boards    Board[]
  selfServeInvites OrganizationSelfServeInvite[]

  @@map("organizations")
}

model Board {
  id             String       @id @default(cuid())
  name           String
  description    String?
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  createdBy      String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  notes          Note[]

  @@map("boards")
}

model Note {
  id        String @id @default(cuid())
  content   String @db.Text
  color     String @default("#fef3c7") // Default yellow color
  done      Boolean @default(false) // Track completion status
  isChecklist Boolean @default(false) // Track if note is a checklist
  checklistItems Json? // Store checklist items as JSON
  boardId   String
  board     Board  @relation(fields: [boardId], references: [id], onDelete: Cascade)
  createdBy String
  user      User   @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime? // Soft delete timestamp
  // Slack integration fields (optional)
  slackChannelId String?
  slackMessageTs String?
  // Content hash used for deduping outbound notifications (normalized content + checklist state)
  contentHash String?

  @@map("notes")
}

model OrganizationInvite {
  id             String       @id @default(cuid())
  email          String
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  invitedBy      String
  user           User         @relation(fields: [invitedBy], references: [id])
  createdAt      DateTime     @default(now())
  status         InviteStatus @default(PENDING)

  @@unique([email, organizationId])
  @@map("organization_invites")
}

model OrganizationSelfServeInvite {
  id             String       @id @default(cuid())
  token          String?      @unique // Cryptographically secure token for the URL
  name           String       // Name/description for the invite link
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  createdBy      String
  user           User         @relation(fields: [createdBy], references: [id])
  createdAt      DateTime     @default(now())
  expiresAt      DateTime?    // Optional expiration date
  usageLimit     Int?         // Optional usage limit
  usageCount     Int          @default(0) // Track how many times it's been used
  isActive       Boolean      @default(true)

  @@map("organization_self_serve_invites")
}

enum InviteStatus {
  PENDING
  ACCEPTED
  DECLINED
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}
